
[License is violated]
action.email.useNSSubject = 1
alert.digest_mode = 0
alert.severity = 5
alert.suppress = 1
alert.suppress.fields = *
alert.suppress.period = 1d
alert.track = 1
counttype = number of events
cron_schedule = 15 * * * *
description = The  consumed volume is over the license limit
dispatch.earliest_time = -1h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = licence_monitor_for_splunk
request.ui_dispatch_view = search
search = index=_internal source=*license_usage.log type=Usage  earliest=-7d@d latest=now()\
| eval MB = round(b/1024/1024,2) | timechart span=1h sum(MB) as totalMB  | eval hour = strftime(_time,"%H") |streamstats sum(totalMB) as totalCumulativeMB reset_before="("hour==0")" | fields - totalMB , hour | predict totalCumulativeMB future_timespan=24 | appendcols [\
search index=_internal source=*license_usage.log type=Usage | dedup poolsz \
| eval MB = round(b/1024/1024,2) \
| stats sum(poolsz) as poolszMB\
| eval poolszMB = round(poolszMB/1024/1024,2)\
] | streamstats  max(poolszMB) as "License Size in MB" | fields - poolszMB | where 'upper95(prediction(totalCumulativeMB))'>'License Size in MB'

[License is valid for less than 90 days]
action.email.useNSSubject = 1
alert.digest_mode = 0
alert.suppress = 0
alert.track = 1
counttype = number of events
cron_schedule = 0 6 * * 1
description = One or more license is valid for less than 90 days
dispatch.earliest_time = -1w
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = licence_monitor_for_splunk
request.ui_dispatch_view = search
search = | rest "/services/licenser/licenses" |search type=enterprise | eval creation_time=strftime(creation_time,"%d-%m-%Y"), days_until_expiration=round((expiration_time-now())/86400) , expiration_time=strftime(expiration_time,"%d-%m-%Y") ,quota = ('quota'/1024/1024), is_unlimited =if('is_unlimited'==0,"no","yes") | table label creation_time status  expiration_time days_until_expiration quota is_unlimited max_violations window_period | where days_until_expiration <= 90

[Prediction over limit]
action.email.useNSSubject = 1
alert.digest_mode = 0
alert.severity = 4
alert.suppress = 1
alert.suppress.fields = *
alert.suppress.period = 1d
alert.track = 1
counttype = number of events
cron_schedule = 15 * * * *
description = The  prediction exceeds the license limit
dispatch.earliest_time = -1h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = licence_monitor_for_splunk
request.ui_dispatch_view = search
search = index=_internal source=*license_usage.log type=Usage  earliest=-7d@d latest=now()\
| eval MB = round(b/1024/1024,2) | timechart span=1h sum(MB) as totalMB  | eval hour = strftime(_time,"%H") |streamstats sum(totalMB) as totalCumulativeMB reset_before="("hour==0")" | fields - totalMB , hour | predict totalCumulativeMB future_timespan=24 | appendcols [\
search index=_internal source=*license_usage.log type=Usage | dedup poolsz \
| eval MB = round(b/1024/1024,2) \
| stats sum(poolsz) as poolszMB\
| eval poolszMB = round(poolszMB/1024/1024,2)\
] | streamstats  max(poolszMB) as "License Size in MB" | fields - poolszMB | where 'upper95(prediction(totalCumulativeMB))'>'License Size in MB'

[Upper prediction over limit]
action.email.useNSSubject = 1
alert.digest_mode = 0
alert.suppress = 1
alert.suppress.fields = *
alert.suppress.period = 1d
alert.track = 1
counttype = number of events
cron_schedule = 15 * * * *
description = The upper prediction exceeds the license limit
dispatch.earliest_time = -1h
dispatch.latest_time = now
display.general.type = statistics
display.page.search.mode = fast
display.page.search.tab = statistics
enableSched = 1
quantity = 0
relation = greater than
request.ui_dispatch_app = licence_monitor_for_splunk
request.ui_dispatch_view = search
search = index=_internal source=*license_usage.log type=Usage  earliest=-7d@d latest=now()\
| eval MB = round(b/1024/1024,2) | timechart span=1h sum(MB) as totalMB  | eval hour = strftime(_time,"%H") |streamstats sum(totalMB) as totalCumulativeMB reset_before="("hour==0")" | fields - totalMB , hour | predict totalCumulativeMB future_timespan=24 | appendcols [\
search index=_internal source=*license_usage.log type=Usage | dedup poolsz \
| eval MB = round(b/1024/1024,2) \
| stats sum(poolsz) as poolszMB\
| eval poolszMB = round(poolszMB/1024/1024,2)\
] | streamstats  max(poolszMB) as "License Size in MB" | fields - poolszMB | where 'upper95(prediction(totalCumulativeMB))'>'License Size in MB'



[Operational Summary Indexing - Volume Calculation]
action.email.useNSSubject = 1
alert.track = 0
enableSched = 1
cron_schedule = 30 0 * * *
dispatch.earliest_time = -1d@d
dispatch.latest_time = -0d@d
schedule_window = 30
search = `operational_volume_summary_calculation`\
| collect `index_assignment_notable_management`


[Operational Summary Indexing - Event Calculation]
enableSched = 1
action.email.useNSSubject = 1
alert.track = 0
cron_schedule = 30 1 * * *
dispatch.earliest_time = -1d@d
dispatch.latest_time = -0d@d
schedule_window = 30
search = `operational_host_summary_event_calculation`\
| collect `index_assignment_notable_management`


[Operational Summary Indexing - Manually Backfill]
action.email.useNSSubject = 1
alert.track = 0
description = this search is only for a manual
search = index=* sourcetype!="stash" _index_earliest=-8d@d _index_latest=-0d@d earliest=-8d@d latest=-0d@d \
| fields _raw,index,host,_indextime sourcetype, source \
| eval time = _indextime, day = strftime(_time,"%Y-%m-%d") \
| bin _time span=1d \
| eval sourcetype = lower(sourcetype) \
| stats count AS Events earliest(_indextime) AS start_indextime latest(_indextime) AS end_indextime sum(eval(len(_raw))) as "Byte" by day host index sourcetype source \
| rex field=source "(module\\\|Win.*\:)(?P<source_01>.*?)$" \
| eval source = coalesce(source_01, source) | eval start_indextime = strftime(start_indextime,"%d.%m %H:%M:%S") \
| eval end_indextime = strftime(end_indextime,"%d.%m %H:%M:%S") \
| eval _time = strptime(day, "%Y-%m-%d") \
| fields - event_date source_01 \
| eval purpose = "summary indexing volume calculation"\
| collect `index_assignment_notable_license_management`